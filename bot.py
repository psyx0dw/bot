import telebot
from telebot import types
import sqlite3
import threading
import os
import datetime

from config import BOT_TOKEN, ADMIN_GROUP_ID, BONUS_PERCENT, MAX_DISCOUNT, REFERRAL_BONUS, DB_PATH

bot = telebot.TeleBot(BOT_TOKEN)

local_storage = threading.local()

def get_conn():
    if not hasattr(local_storage, 'conn'):
        local_storage.conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    return local_storage.conn

# --- Database Initialization ---
def init_db(sql_file):
    try:
        if not os.path.exists(DB_PATH):
            with open(sql_file, 'r', encoding='utf-8') as f:
                sql_script = f.read()
            
            with get_conn() as conn:
                conn.executescript(sql_script)
            print(f"‚úÖ Database tables created from {sql_file}.")
        else:
            print("‚úÖ Database file already exists.")

    except FileNotFoundError:
        print(f"‚ùå Error: Database schema file '{sql_file}' not found.")
        print("Please ensure models.sql is in the same directory.")
    except Exception as e:
        print(f"‚ùå An error occurred during database initialization: {e}")

def get_user(telegram_id):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT u.*, 
                   (SELECT COUNT(*) FROM users WHERE referrer_id = u.id) AS referrals
            FROM users u WHERE telegram_id = ?
        """, (telegram_id,))
        return cur.fetchone()

def get_user_id(telegram_id):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
        row = cur.fetchone()
        return row[0] if row else None

def add_user_full(telegram_id, name, phone=None, email=None, referrer_telegram_id=None):
    with get_conn() as conn:
        cur = conn.cursor()
        referrer_id = None
        if referrer_telegram_id:
            cur.execute("SELECT id FROM users WHERE telegram_id = ?", (referrer_telegram_id,))
            r = cur.fetchone()
            if r:
                referrer_id = r[0]
        cur.execute("""
            INSERT OR IGNORE INTO users (telegram_id, name, phone, email, referrer_id)
            VALUES (?, ?, ?, ?, ?)
        """, (telegram_id, name, phone, email, referrer_id))
        conn.commit()

# --- Handlers ---
@bot.message_handler(commands=["start"])
def start(message):
    telegram_id = str(message.chat.id)
    referrer_telegram_id = None
    if message.text.startswith("/start "):
        try:
            referrer_telegram_id = message.text.split(" ", 1)[1]
            if get_user(referrer_telegram_id) and referrer_telegram_id != telegram_id:
                bot.send_message(telegram_id, "ü§ù –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–µ—Ä–µ—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.")
            else:
                referrer_telegram_id = None
        except IndexError:
            pass
    
    user = get_user(telegram_id)
    if user:
        bot.send_message(telegram_id, f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, {user[2]} ‚òï", reply_markup=main_keyboard())
    else:
        msg = bot.send_message(telegram_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(msg, finish_registration, referrer_telegram_id)

def finish_registration(message, referrer_telegram_id=None):
    name = message.text.strip()
    if len(name) < 2:
        msg = bot.send_message(message.chat.id, "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler(msg, finish_registration, referrer_telegram_id)
        return
    
    telegram_id = str(message.chat.id)
    add_user_full(telegram_id, name, referrer_telegram_id=referrer_telegram_id)
    
    bot.send_message(
        telegram_id,
        f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ñ–µ ‚òï",
        reply_markup=main_keyboard()
    )
    bot.send_message(
    telegram_id,
    "üìå <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>\n\n"
    "1Ô∏è‚É£ –ù–∞–∂–º–∏ ¬´üìã –ú–µ–Ω—é¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–∏—Ç–∫–∏\n"
    "2Ô∏è‚É£ –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–õ–∞—Ç—Ç–µ 0.3–ª</i>\n"
    "3Ô∏è‚É£ –ù–∞–∂–º–∏ ¬´üõí –ö–æ—Ä–∑–∏–Ω–∞¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑\n"
    "4Ô∏è‚É£ –ù–∞–∂–º–∏ ¬´‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª ‚Äî –∏ –ø—Ä–∏—Ö–æ–¥–∏ –Ω–∞ —Ç–æ—á–∫—É —á–µ—Ä–µ–∑ 5‚Äì10 –º–∏–Ω—É—Ç ‚òï",
    parse_mode="HTML"
)

# üéõ Keyboard for client
def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìã –ú–µ–Ω—é")
    kb.add("üõí –ö–æ—Ä–∑–∏–Ω–∞")
    kb.add("üéØ –ë–∞–ª–ª—ã")
    kb.add("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
    kb.add("üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    return kb

def handle_add_more_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é")
    return kb

@bot.message_handler(func=lambda m: m.text == "üìã –ú–µ–Ω—é")
def show_menu(message):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT category, name, size, price, quantity FROM stock ORDER BY category, name, CAST(size AS REAL)")
        rows = cur.fetchall()
    if not rows:
        bot.send_message(message.chat.id, "üì≠ –ú–µ–Ω—é –ø—É—Å—Ç–æ–µ")
        return

    text = "üìã <b>–ú–µ–Ω—é:</b>\n"
    current_cat = None
    for cat, name, size, price, qty in rows:
        if cat != current_cat:
            text += f"\nüî∏ <b>{cat}</b>\n"
            current_cat = cat
        text += f"‚Ä¢ {name} {size}–ª ‚Äî {price}‚ÇΩ (–æ—Å—Ç–∞–ª–æ—Å—å: {qty})\n"

    bot.send_message(message.chat.id, text, parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
def show_cart(message):
    telegram_id = str(message.chat.id)
    user = get_user(telegram_id)
    if not user:
        bot.send_message(telegram_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –ù–∞–∂–º–∏—Ç–µ /start.")
        return

    items = get_cart_items(telegram_id)
    if not items:
        bot.send_message(telegram_id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üò¢")
        return
    total = sum(it["price"] * it["qty"] for it in items)
    points = user[5] or 0
    referrals = user[-1] or 0
    discount = calc_discount(points, referrals, total)
    final_total = total - discount
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm"))
    kb.add(types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear"))
    bot.send_message(
        telegram_id,
        f"üõí <b>–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞:</b>\n{format_cart_lines(items)}\n\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\nüéÅ –°–∫–∏–¥–∫–∞: {discount}‚ÇΩ\nüì¶ –ö –æ–ø–ª–∞—Ç–µ: {final_total}‚ÇΩ",
        reply_markup=kb,
        parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda call: call.data == "clear")
def clear_cart_handler(call):
    telegram_id = str(call.message.chat.id)
    clear_cart_db(telegram_id)
    bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ üóëÔ∏è")
    bot.send_message(telegram_id, "–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.", reply_markup=main_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "confirm")
def confirm_order(call):
    telegram_id = str(call.message.chat.id)
    user = get_user(telegram_id)
    if not user:
        bot.send_message(telegram_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start.")
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    items = get_cart_items(telegram_id)
    if not items:
        bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    
    for it in items:
        if not is_available(it["name"], it["qty"]):
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {it['name']}")
            return
            
    total = sum(it["price"] * it["qty"] for it in items)
    points = user[5] or 0
    referrals = user[-1] or 0
    discount = calc_discount(points, referrals, total)
    final_total = total - discount
    order_id = create_order(telegram_id, items, final_total)
    
    for it in items:
        reduce_stock(it["name"], it["qty"])
    
    earned = int(total * BONUS_PERCENT)
    spent = int(discount)
    update_points(telegram_id, earned - spent)
    clear_cart_db(telegram_id)
    
    items_text = "; ".join([f"{it['name']} x{it['qty']}" for it in items])
    bot.send_message(
        telegram_id,
        f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
        f"üßæ –ü–æ–∑–∏—Ü–∏–∏: {items_text}\n"
        f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {final_total}‚ÇΩ\n"
        f"üéØ –ë–∞–ª–ª—ã: +{earned}, -{spent}\n\n"
        f"‚òï –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è! –ü–æ–¥–æ–π–¥–∏ –Ω–∞ —Ç–æ—á–∫—É —á–µ—Ä–µ–∑ 5‚Äì10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ.",
        reply_markup=main_keyboard()
    )
    ready_button = types.InlineKeyboardMarkup()
    ready_button.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤", callback_data=f"ready_{telegram_id}_{order_id}"))
    bot.send_message(
        ADMIN_GROUP_ID,
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}\nüë§ {user[2]}\nüßæ {items_text}\nüí∞ –ö –æ–ø–ª–∞—Ç–µ: {final_total}‚ÇΩ",
        reply_markup=ready_button
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("ready_"))
def mark_ready(call):
    _, telegram_id, order_id = call.data.split("_", 2)
    bot.send_message(int(telegram_id), f"‚úÖ –¢–≤–æ–π –∑–∞–∫–∞–∑ ‚Ññ{order_id} –≥–æ—Ç–æ–≤! –ó–∞–±–µ—Ä–∏ –µ–≥–æ –Ω–∞ —Ç–æ—á–∫–µ ‚òï")
    bot.answer_callback_query(call.id, "–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω ‚úÖ")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)

@bot.message_handler(func=lambda m: m.text == "üéØ –ë–∞–ª–ª—ã")
def show_points(message):
    telegram_id = str(message.chat.id)
    user = get_user(telegram_id)
    if not user:
        bot.send_message(telegram_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã. –ù–∞–∂–º–∏—Ç–µ /start.")
        return
        
    points = user[5] or 0
    referrals = user[-1] or 0

    text = (
        "üéØ <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b>\n\n"
        "–ó–∞ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –±–∞–ª–ª—ã. –ò–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–æ 5% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞!\n"
        f"–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: <b>{points}</b>\n\n"
        "üîó **–°–∫–∏–¥–∫–∞ –¥–æ 20%:**\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –±–æ–ª—å—à–µ 1000 –±–∞–ª–ª–æ–≤ –∏ 10 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π, "
        "—Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–∫–∏–¥–∫—É –¥–æ 20% –Ω–∞ –ª—é–±–æ–π –∑–∞–∫–∞–∑! "
    )
    bot.send_message(telegram_id, text, parse_mode="HTML")


@bot.message_handler(func=lambda m: m.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
def show_referral(message):
    telegram_id = str(message.chat.id)
    bot.send_message(
        telegram_id, 
        f"üîó <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–∞–ª–ª—ã!</b>\n\n"
        "–ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã.\n"
        f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`https://t.me/{bot.get_me().username}?start={telegram_id}`",
        parse_mode="HTML"
    )

@bot.message_handler(func=lambda m: m.text == "üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
def support_info(message):
    bot.send_message(
        message.chat.id,
        "üõ† –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º:\n@tamiklung\n–ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"
    )

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë")
def add_more(message):
    bot.send_message(
        message.chat.id,
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é üìã",
        reply_markup=main_keyboard()
    )

@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é")
def go_to_checkout(message):
    show_cart(message)

# --- Utility Functions ---
def add_to_cart_db(telegram_id, item):
    user_id = get_user_id(telegram_id)
    if not user_id: return
    with get_conn() as conn:
        conn.execute("""
            INSERT INTO cart (user_id, name, price, qty)
            VALUES (?, ?, ?, ?)
        """, (user_id, item["name"], item["price"], item["qty"]))
        conn.commit()

def get_cart_items(telegram_id):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT name, price, qty
            FROM cart
            WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)
        """, (telegram_id,))
        return [{"name": r[0], "price": r[1], "qty": r[2]} for r in cur.fetchall()]

def clear_cart_db(telegram_id):
    with get_conn() as conn:
        conn.execute("DELETE FROM cart WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)", (telegram_id,))
        conn.commit()

def create_order(telegram_id, items, total):
    user_id = get_user_id(telegram_id)
    if not user_id: return None
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO orders (user_id, total, created_at) VALUES (?, ?, ?)", (user_id, total, datetime.datetime.now()))
        order_id = cur.lastrowid
        for it in items:
            cur.execute(
                "INSERT INTO order_items (order_id, name, price, qty) VALUES (?, ?, ?, ?)",
                (order_id, it["name"], it["price"], it["qty"])
            )
        conn.commit()
        return order_id

def update_points(telegram_id, delta):
    with get_conn() as conn:
        conn.execute("UPDATE users SET points = points + ? WHERE telegram_id = ?", (delta, telegram_id))
        conn.commit()

def calc_discount(points, referrals, total):
    points = points or 0
    referrals = referrals or 0
    rate = MAX_DISCOUNT if (points >= 1000 and referrals >= 10) else 0.05
    return min(points, int(total * rate))

def format_cart_lines(items):
    return "\n".join([f"‚Ä¢ {it['name']} x{it['qty']} ‚Äî {it['price']}‚ÇΩ" for it in items])

def is_available(full_name, qty=1):
    return get_stock_by_fullname(full_name) >= qty

def get_stock_by_fullname(full_name):
    if not full_name.endswith("–ª"):
        return 0
    name, size_l = full_name.rsplit(" ", 1)
    size = size_l.replace("–ª", "")
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT quantity FROM stock WHERE name=? AND size=?", (name, size))
        row = cur.fetchone()
        return row[0] if row else 0

def reduce_stock(full_name, qty):
    if not full_name.endswith("–ª"):
        return
    name, size_l = full_name.rsplit(" ", 1)
    size = size_l.replace("–ª", "")
    with get_conn() as conn:
        conn.execute("""
            UPDATE stock SET quantity = quantity - ?
            WHERE name = ? AND size = ? AND quantity >= ?
        """, (qty, name, size, qty))
        conn.commit()
        cur = conn.cursor()
        cur.execute("SELECT quantity FROM stock WHERE name=? AND size=?", (name, size))
        row = cur.fetchone()
        if row and row[0] < 3:
            bot.send_message(ADMIN_GROUP_ID, f"‚ö†Ô∏è –û—Å—Ç–∞—Ç–æ–∫ –Ω–∏–∑–∫–∏–π: {name} {size}–ª ‚Äî {row[0]} —à—Ç")

# --- Admin Handlers ---
@bot.message_handler(commands=["admin"])
def admin_panel(message):
    if message.chat.type not in ["group", "supergroup"]:
        return
    if message.chat.id != ADMIN_GROUP_ID:
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏")
    kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫", "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
    kb.add("üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã")
    bot.send_message(message.chat.id, "üî• –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
def manage_items_menu(message):
    if message.chat.id != ADMIN_GROUP_ID:
        return
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_add"))
    kb.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="admin_update_qty"))
    kb.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data == "admin_update_qty")
def admin_update_qty_prompt(call):
    msg = bot.send_message(call.message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä –∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–õ–∞—Ç—Ç–µ 0.3, 15</i>", parse_mode="HTML")
    bot.register_next_step_handler(msg, apply_update_qty)

def apply_update_qty(message):
    if message.chat.id != ADMIN_GROUP_ID:
        return
    try:
        parts = [p.strip() for p in message.text.split(",")]
        if len(parts) != 2:
            raise ValueError
        
        name_size_str, new_qty_str = parts
        name_parts = name_size_str.rsplit(" ", 1)
        if len(name_parts) != 2:
            raise ValueError
        
        name, size = name_parts[0], name_parts[1].replace("–ª", "")
        new_qty = int(new_qty_str)
        
        with get_conn() as conn:
            cur = conn.cursor()
            cur.execute("UPDATE stock SET quantity = ? WHERE name = ? AND size = ?", (new_qty, name, size))
            conn.commit()
            if cur.rowcount > 0:
                bot.send_message(message.chat.id, f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è {name} {size}–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_qty}.")
            else:
                bot.send_message(message.chat.id, f"‚ùå –¢–æ–≤–∞—Ä '{name} {size}–ª' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

@bot.callback_query_handler(func=lambda call: call.data == "admin_delete")
def admin_delete_prompt(call):
    msg = bot.send_message(call.message.chat.id, "üóëÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–õ–∞—Ç—Ç–µ 0.3–ª</i>", parse_mode="HTML")
    bot.register_next_step_handler(msg, apply_delete_item)

def apply_delete_item(message):
    if message.chat.id != ADMIN_GROUP_ID:
        return
    try:
        name_size_str = message.text.strip()
        name_parts = name_size_str.rsplit(" ", 1)
        if len(name_parts) != 2:
            raise ValueError
        
        name, size = name_parts[0], name_parts[1].replace("–ª", "")
        
        with get_conn() as conn:
            cur = conn.cursor()
            cur.execute("DELETE FROM stock WHERE name = ? AND size = ?", (name, size))
            conn.commit()
            if cur.rowcount > 0:
                bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä '{name} {size}–ª' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                bot.send_message(message.chat.id, f"‚ùå –¢–æ–≤–∞—Ä '{name} {size}–ª' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

@bot.callback_query_handler(func=lambda call: call.data == "admin_add")
def admin_add_prompt_callback(call):
    add_item_prompt(call.message)

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫")
def add_item_prompt(message):
    if message.chat.id != ADMIN_GROUP_ID:
        return
    msg = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏ –ø–æ–∑–∏—Ü–∏—é –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è;–ù–∞–∑–≤–∞–Ω–∏–µ;–†–∞–∑–º–µ—Ä;–¶–µ–Ω–∞;–û—Å—Ç–∞—Ç–æ–∫")
    bot.register_next_step_handler(msg, apply_new_item)

def apply_new_item(message):
    if message.chat.id != ADMIN_GROUP_ID:
        return
    try:
        cat, name, size, price, qty = [x.strip() for x in message.text.split(";")]
        price = int(price); qty = int(qty)
        with get_conn() as conn:
            conn.execute("INSERT INTO stock (category, name, size, price, quantity) VALUES (?, ?, ?, ?, ?)",
                         (cat, name, size, price, qty))
            conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {cat} | {name} {size}–ª ‚Äî {price}‚ÇΩ (–æ—Å—Ç–∞—Ç–æ–∫ {qty})")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü—Ä–∏–º–µ—Ä: Classic;–õ–∞—Ç—Ç–µ;0.3;250;10")

@bot.message_handler(func=lambda m: m.text == "üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã")
def show_recent_orders(message):
    if message.chat.id != ADMIN_GROUP_ID:
        return
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT o.id, u.name, o.total, o.created_at
            FROM orders o JOIN users u ON o.user_id = u.id
            ORDER BY o.created_at DESC LIMIT 10
        """)
        rows = cur.fetchall()
    if not rows:
        bot.send_message(message.chat.id, "üßæ –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    text = "üßæ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤:</b>\n"
    for order_id, user_name, total, created_at in rows:
        text += f"‚Ä¢ ‚Ññ{order_id} –æ—Ç {user_name} ({created_at}) ‚Äî {total}‚ÇΩ\n"
    bot.send_message(message.chat.id, text, parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    if message.chat.id != ADMIN_GROUP_ID:
        return
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*), SUM(total) FROM orders")
        count, revenue = cur.fetchone()
        cur.execute("SELECT COUNT(*) FROM users")
        users = cur.fetchone()[0]
    text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n–ó–∞–∫–∞–∑–æ–≤: {count or 0}\n–í—ã—Ä—É—á–∫–∞: {revenue or 0}‚ÇΩ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users or 0}"
    bot.send_message(message.chat.id, text, parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏")
def show_low_stock(message):
    if message.chat.id != ADMIN_GROUP_ID:
        return
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT category, name, size, quantity FROM stock WHERE quantity < 3 ORDER BY quantity")
        rows = cur.fetchall()
    if not rows:
        bot.send_message(message.chat.id, "–í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –Ω–æ—Ä–º–µ ‚úÖ")
        return
    text = "‚ö†Ô∏è <b>–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:</b>\n"
    for cat, name, size, qty in rows:
        text += f"‚Ä¢ {cat}: {name} {size}–ª ‚Äî {qty} —à—Ç\n"
    bot.send_message(message.chat.id, text, parse_mode="HTML")

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ
@bot.message_handler(func=lambda m: True)
def handle_text(message):
    telegram_id = str(message.chat.id)
    text = message.text.strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
    if text.startswith('/'):
        return

    if not get_user(telegram_id):
        return

    # Check for keywords before splitting
    if text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é"]:
        return

    # Updated logic to handle cases like "–≠—Å–ø—Ä–µ—Å—Å–æ 0.3" and "–≠—Å–ø—Ä–µ—Å—Å–æ 0.3–ª"
    try:
        parts = text.rsplit(" ", 1)
        if len(parts) == 2:
            name, size_str = parts
            size = size_str.replace("–ª", "").strip()
            # Ensure size is a number
            float(size)
        else:
            bot.send_message(telegram_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–±—ä–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–õ–∞—Ç—Ç–µ 0.3–ª</i>", parse_mode="HTML")
            return
    except (ValueError, IndexError):
        bot.send_message(telegram_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–±—ä–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–õ–∞—Ç—Ç–µ 0.3–ª</i>", parse_mode="HTML")
        return

    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT price, quantity FROM stock WHERE LOWER(name)=LOWER(?) AND size=?", (name, size))
        row = cur.fetchone()

    if not row:
        bot.send_message(telegram_id, "‚ùå –¢–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    price, qty = row
    if qty < 1:
        bot.send_message(telegram_id, f"‚ùå {name} {size}–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.")
        return

    item = {"name": f"{name} {size}–ª", "price": price, "qty": 1}
    add_to_cart_db(telegram_id, item)

    bot.send_message(
        telegram_id,
        f"‚úÖ {item['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.",
        reply_markup=handle_add_more_keyboard()
    )

# üöÄ Launch
if __name__ == "__main__":
    init_db('models.sql')
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã ‚òï")
    bot.infinity_polling()